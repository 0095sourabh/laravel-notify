/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./prism */ \"./resources/js/prism.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwLmpzPzZkNDAiXSwibmFtZXMiOlsicmVxdWlyZSJdLCJtYXBwaW5ncyI6IkFBQUFBLG1CQUFPLENBQUMsd0NBQUQsQ0FBUCIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9hcHAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL3ByaXNtJylcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/js/prism.js":
/*!*******************************!*\
  !*** ./resources/js/prism.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/* PrismJS 1.17.1\nhttps://prismjs.com/download.html#themes=prism-twilight&languages=markup+css+clike+css-extras+diff+markup-templating+php+php-extras&plugins=line-highlight+autolinker+data-uri-highlight+custom-class+file-highlight+toolbar+highlight-keywords+inline-color+autoloader+command-line+normalize-whitespace+show-invisibles+show-language+match-braces */\nvar _self = \"undefined\" != typeof window ? window : \"undefined\" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {},\n    Prism = function (u) {\n  var c = /\\blang(?:uage)?-([\\w-]+)\\b/i,\n      r = 0;\n  var _ = {\n    manual: u.Prism && u.Prism.manual,\n    disableWorkerMessageHandler: u.Prism && u.Prism.disableWorkerMessageHandler,\n    util: {\n      encode: function encode(e) {\n        return e instanceof L ? new L(e.type, _.util.encode(e.content), e.alias) : Array.isArray(e) ? e.map(_.util.encode) : e.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n      },\n      type: function type(e) {\n        return Object.prototype.toString.call(e).slice(8, -1);\n      },\n      objId: function objId(e) {\n        return e.__id || Object.defineProperty(e, \"__id\", {\n          value: ++r\n        }), e.__id;\n      },\n      clone: function n(e, t) {\n        var a,\n            r,\n            i = _.util.type(e);\n\n        switch (t = t || {}, i) {\n          case \"Object\":\n            if (r = _.util.objId(e), t[r]) return t[r];\n\n            for (var o in a = {}, t[r] = a, e) {\n              e.hasOwnProperty(o) && (a[o] = n(e[o], t));\n            }\n\n            return a;\n\n          case \"Array\":\n            return r = _.util.objId(e), t[r] ? t[r] : (a = [], t[r] = a, e.forEach(function (e, r) {\n              a[r] = n(e, t);\n            }), a);\n\n          default:\n            return e;\n        }\n      },\n      currentScript: function currentScript() {\n        if (\"undefined\" == typeof document) return null;\n        if (\"currentScript\" in document) return document.currentScript;\n\n        try {\n          throw new Error();\n        } catch (e) {\n          var r = (/at [^(\\r\\n]*\\((.*):.+:.+\\)$/i.exec(e.stack) || [])[1];\n\n          if (r) {\n            var n = document.getElementsByTagName(\"script\");\n\n            for (var t in n) {\n              if (n[t].src == r) return n[t];\n            }\n          }\n\n          return null;\n        }\n      }\n    },\n    languages: {\n      extend: function extend(e, r) {\n        var n = _.util.clone(_.languages[e]);\n\n        for (var t in r) {\n          n[t] = r[t];\n        }\n\n        return n;\n      },\n      insertBefore: function insertBefore(n, e, r, t) {\n        var a = (t = t || _.languages)[n],\n            i = {};\n\n        for (var o in a) {\n          if (a.hasOwnProperty(o)) {\n            if (o == e) for (var l in r) {\n              r.hasOwnProperty(l) && (i[l] = r[l]);\n            }\n            r.hasOwnProperty(o) || (i[o] = a[o]);\n          }\n        }\n\n        var s = t[n];\n        return t[n] = i, _.languages.DFS(_.languages, function (e, r) {\n          r === s && e != n && (this[e] = i);\n        }), i;\n      },\n      DFS: function e(r, n, t, a) {\n        a = a || {};\n        var i = _.util.objId;\n\n        for (var o in r) {\n          if (r.hasOwnProperty(o)) {\n            n.call(r, o, r[o], t || o);\n\n            var l = r[o],\n                s = _.util.type(l);\n\n            \"Object\" !== s || a[i(l)] ? \"Array\" !== s || a[i(l)] || (a[i(l)] = !0, e(l, n, o, a)) : (a[i(l)] = !0, e(l, n, null, a));\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlightAll: function highlightAll(e, r) {\n      _.highlightAllUnder(document, e, r);\n    },\n    highlightAllUnder: function highlightAllUnder(e, r, n) {\n      var t = {\n        callback: n,\n        selector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n      };\n\n      _.hooks.run(\"before-highlightall\", t);\n\n      for (var a, i = e.querySelectorAll(t.selector), o = 0; a = i[o++];) {\n        _.highlightElement(a, !0 === r, t.callback);\n      }\n    },\n    highlightElement: function highlightElement(e, r, n) {\n      var t = function (e) {\n        for (; e && !c.test(e.className);) {\n          e = e.parentNode;\n        }\n\n        return e ? (e.className.match(c) || [, \"none\"])[1].toLowerCase() : \"none\";\n      }(e),\n          a = _.languages[t];\n\n      e.className = e.className.replace(c, \"\").replace(/\\s+/g, \" \") + \" language-\" + t;\n      var i = e.parentNode;\n      i && \"pre\" === i.nodeName.toLowerCase() && (i.className = i.className.replace(c, \"\").replace(/\\s+/g, \" \") + \" language-\" + t);\n      var o = {\n        element: e,\n        language: t,\n        grammar: a,\n        code: e.textContent\n      };\n\n      function l(e) {\n        o.highlightedCode = e, _.hooks.run(\"before-insert\", o), o.element.innerHTML = o.highlightedCode, _.hooks.run(\"after-highlight\", o), _.hooks.run(\"complete\", o), n && n.call(o.element);\n      }\n\n      if (_.hooks.run(\"before-sanity-check\", o), !o.code) return _.hooks.run(\"complete\", o), void (n && n.call(o.element));\n      if (_.hooks.run(\"before-highlight\", o), o.grammar) {\n        if (r && u.Worker) {\n          var s = new Worker(_.filename);\n          s.onmessage = function (e) {\n            l(e.data);\n          }, s.postMessage(JSON.stringify({\n            language: o.language,\n            code: o.code,\n            immediateClose: !0\n          }));\n        } else l(_.highlight(o.code, o.grammar, o.language));\n      } else l(_.util.encode(o.code));\n    },\n    highlight: function highlight(e, r, n) {\n      var t = {\n        code: e,\n        grammar: r,\n        language: n\n      };\n      return _.hooks.run(\"before-tokenize\", t), t.tokens = _.tokenize(t.code, t.grammar), _.hooks.run(\"after-tokenize\", t), L.stringify(_.util.encode(t.tokens), t.language);\n    },\n    matchGrammar: function matchGrammar(e, r, n, t, a, i, o) {\n      for (var l in n) {\n        if (n.hasOwnProperty(l) && n[l]) {\n          var s = n[l];\n          s = Array.isArray(s) ? s : [s];\n\n          for (var u = 0; u < s.length; ++u) {\n            if (o && o == l + \",\" + u) return;\n            var c = s[u],\n                g = c.inside,\n                f = !!c.lookbehind,\n                d = !!c.greedy,\n                h = 0,\n                m = c.alias;\n\n            if (d && !c.pattern.global) {\n              var p = c.pattern.toString().match(/[imsuy]*$/)[0];\n              c.pattern = RegExp(c.pattern.source, p + \"g\");\n            }\n\n            c = c.pattern || c;\n\n            for (var y = t, v = a; y < r.length; v += r[y].length, ++y) {\n              var k = r[y];\n              if (r.length > e.length) return;\n\n              if (!(k instanceof L)) {\n                if (d && y != r.length - 1) {\n                  if (c.lastIndex = v, !(O = c.exec(e))) break;\n\n                  for (var b = O.index + (f && O[1] ? O[1].length : 0), w = O.index + O[0].length, A = y, P = v, x = r.length; A < x && (P < w || !r[A].type && !r[A - 1].greedy); ++A) {\n                    (P += r[A].length) <= b && (++y, v = P);\n                  }\n\n                  if (r[y] instanceof L) continue;\n                  S = A - y, k = e.slice(v, P), O.index -= v;\n                } else {\n                  c.lastIndex = 0;\n                  var O = c.exec(k),\n                      S = 1;\n                }\n\n                if (O) {\n                  f && (h = O[1] ? O[1].length : 0);\n                  w = (b = O.index + h) + (O = O[0].slice(h)).length;\n                  var j = k.slice(0, b),\n                      N = k.slice(w),\n                      E = [y, S];\n                  j && (++y, v += j.length, E.push(j));\n                  var C = new L(l, g ? _.tokenize(O, g) : O, m, O, d);\n                  if (E.push(C), N && E.push(N), Array.prototype.splice.apply(r, E), 1 != S && _.matchGrammar(e, r, n, y, v, !0, l + \",\" + u), i) break;\n                } else if (i) break;\n              }\n            }\n          }\n        }\n      }\n    },\n    tokenize: function tokenize(e, r) {\n      var n = [e],\n          t = r.rest;\n\n      if (t) {\n        for (var a in t) {\n          r[a] = t[a];\n        }\n\n        delete r.rest;\n      }\n\n      return _.matchGrammar(e, n, r, 0, 0, !1), n;\n    },\n    hooks: {\n      all: {},\n      add: function add(e, r) {\n        var n = _.hooks.all;\n        n[e] = n[e] || [], n[e].push(r);\n      },\n      run: function run(e, r) {\n        var n = _.hooks.all[e];\n        if (n && n.length) for (var t, a = 0; t = n[a++];) {\n          t(r);\n        }\n      }\n    },\n    Token: L\n  };\n\n  function L(e, r, n, t, a) {\n    this.type = e, this.content = r, this.alias = n, this.length = 0 | (t || \"\").length, this.greedy = !!a;\n  }\n\n  if (u.Prism = _, L.stringify = function (e, r) {\n    if (\"string\" == typeof e) return e;\n    if (Array.isArray(e)) return e.map(function (e) {\n      return L.stringify(e, r);\n    }).join(\"\");\n    var n = {\n      type: e.type,\n      content: L.stringify(e.content, r),\n      tag: \"span\",\n      classes: [\"token\", e.type],\n      attributes: {},\n      language: r\n    };\n\n    if (e.alias) {\n      var t = Array.isArray(e.alias) ? e.alias : [e.alias];\n      Array.prototype.push.apply(n.classes, t);\n    }\n\n    _.hooks.run(\"wrap\", n);\n\n    var a = Object.keys(n.attributes).map(function (e) {\n      return e + '=\"' + (n.attributes[e] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + n.tag + ' class=\"' + n.classes.join(\" \") + '\"' + (a ? \" \" + a : \"\") + \">\" + n.content + \"</\" + n.tag + \">\";\n  }, !u.document) return u.addEventListener && (_.disableWorkerMessageHandler || u.addEventListener(\"message\", function (e) {\n    var r = JSON.parse(e.data),\n        n = r.language,\n        t = r.code,\n        a = r.immediateClose;\n    u.postMessage(_.highlight(t, _.languages[n], n)), a && u.close();\n  }, !1)), _;\n\n  var e = _.util.currentScript();\n\n  if (e && (_.filename = e.src, e.hasAttribute(\"data-manual\") && (_.manual = !0)), !_.manual) {\n    var n = function n() {\n      _.manual || _.highlightAll();\n    };\n\n    var t = document.readyState;\n    \"loading\" === t || \"interactive\" === t && e.defer ? document.addEventListener(\"DOMContentLoaded\", n) : window.requestAnimationFrame ? window.requestAnimationFrame(n) : window.setTimeout(n, 16);\n  }\n\n  return _;\n}(_self);\n\n true && module.exports && (module.exports = Prism), \"undefined\" != typeof global && (global.Prism = Prism);\nPrism.languages.markup = {\n  comment: /<!--[\\s\\S]*?-->/,\n  prolog: /<\\?[\\s\\S]+?\\?>/,\n  doctype: {\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:(?!<!--)[^\"'\\]]|\"[^\"]*\"|'[^']*'|<!--[\\s\\S]*?-->)*\\]\\s*)?>/i,\n    greedy: !0\n  },\n  cdata: /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  tag: {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: !0,\n    inside: {\n      tag: {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          punctuation: /^<\\/?/,\n          namespace: /^[^\\s>\\/:]+:/\n        }\n      },\n      \"attr-value\": {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          punctuation: [/^=/, {\n            pattern: /^(\\s*)[\"']|[\"']$/,\n            lookbehind: !0\n          }]\n        }\n      },\n      punctuation: /\\/?>/,\n      \"attr-name\": {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          namespace: /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  entity: /&#?[\\da-z]{1,8};/i\n}, Prism.languages.markup.tag.inside[\"attr-value\"].inside.entity = Prism.languages.markup.entity, Prism.hooks.add(\"wrap\", function (a) {\n  \"entity\" === a.type && (a.attributes.title = a.content.replace(/&amp;/, \"&\"));\n}), Object.defineProperty(Prism.languages.markup.tag, \"addInlined\", {\n  value: function value(a, e) {\n    var s = {};\n    s[\"language-\" + e] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: !0,\n      inside: Prism.languages[e]\n    }, s.cdata = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var n = {\n      \"included-cdata\": {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: s\n      }\n    };\n    n[\"language-\" + e] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[e]\n    };\n    var t = {};\n    t[a] = {\n      pattern: RegExp(\"(<__[\\\\s\\\\S]*?>)(?:<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\s*|[\\\\s\\\\S])*?(?=<\\\\/__>)\".replace(/__/g, a), \"i\"),\n      lookbehind: !0,\n      greedy: !0,\n      inside: n\n    }, Prism.languages.insertBefore(\"markup\", \"cdata\", t);\n  }\n}), Prism.languages.xml = Prism.languages.extend(\"markup\", {}), Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup;\n!function (s) {\n  var t = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  s.languages.css = {\n    comment: /\\/\\*[\\s\\S]*?\\*\\//,\n    atrule: {\n      pattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,\n      inside: {\n        rule: /@[\\w-]+/\n      }\n    },\n    url: {\n      pattern: RegExp(\"url\\\\((?:\" + t.source + \"|[^\\n\\r()]*)\\\\)\", \"i\"),\n      inside: {\n        \"function\": /^url/i,\n        punctuation: /^\\(|\\)$/\n      }\n    },\n    selector: RegExp(\"[^{}\\\\s](?:[^{};\\\"']|\" + t.source + \")*?(?=\\\\s*\\\\{)\"),\n    string: {\n      pattern: t,\n      greedy: !0\n    },\n    property: /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n    important: /!important\\b/i,\n    \"function\": /[-a-z0-9]+(?=\\()/i,\n    punctuation: /[(){};:,]/\n  }, s.languages.css.atrule.inside.rest = s.languages.css;\n  var e = s.languages.markup;\n  e && (e.tag.addInlined(\"style\", \"css\"), s.languages.insertBefore(\"inside\", \"attr-value\", {\n    \"style-attr\": {\n      pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n      inside: {\n        \"attr-name\": {\n          pattern: /^\\s*style/i,\n          inside: e.tag.inside\n        },\n        punctuation: /^\\s*=\\s*['\"]|['\"]\\s*$/,\n        \"attr-value\": {\n          pattern: /.+/i,\n          inside: s.languages.css\n        }\n      },\n      alias: \"language-css\"\n    }\n  }, e.tag));\n}(Prism);\nPrism.languages.clike = {\n  comment: [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: !0\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: !0,\n    greedy: !0\n  }],\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: !0\n  },\n  \"class-name\": {\n    pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n    lookbehind: !0,\n    inside: {\n      punctuation: /[.\\\\]/\n    }\n  },\n  keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  \"boolean\": /\\b(?:true|false)\\b/,\n  \"function\": /\\w+(?=\\()/,\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  operator: /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n  punctuation: /[{}[\\];(),.:]/\n};\n!function (e) {\n  e.languages.css.selector = {\n    pattern: e.languages.css.selector,\n    inside: {\n      \"pseudo-element\": /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n      \"pseudo-class\": /:[-\\w]+/,\n      \"class\": /\\.[-:.\\w]+/,\n      id: /#[-:.\\w]+/,\n      attribute: {\n        pattern: /\\[(?:[^[\\]\"']|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1)*\\]/,\n        greedy: !0,\n        inside: {\n          punctuation: /^\\[|\\]$/,\n          \"case-sensitivity\": {\n            pattern: /(\\s)[si]$/i,\n            lookbehind: !0,\n            alias: \"keyword\"\n          },\n          namespace: {\n            pattern: /^(\\s*)[-*\\w\\xA0-\\uFFFF]*\\|(?!=)/,\n            lookbehind: !0,\n            inside: {\n              punctuation: /\\|$/\n            }\n          },\n          attribute: {\n            pattern: /^(\\s*)[-\\w\\xA0-\\uFFFF]+/,\n            lookbehind: !0\n          },\n          value: [/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/, {\n            pattern: /(=\\s*)[-\\w\\xA0-\\uFFFF]+(?=\\s*$)/,\n            lookbehind: !0\n          }],\n          operator: /[|~*^$]?=/\n        }\n      },\n      \"n-th\": [{\n        pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n        lookbehind: !0,\n        inside: {\n          number: /[\\dn]+/,\n          operator: /[+-]/\n        }\n      }, {\n        pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n        lookbehind: !0\n      }],\n      punctuation: /[()]/\n    }\n  }, e.languages.insertBefore(\"css\", \"property\", {\n    variable: {\n      pattern: /(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i,\n      lookbehind: !0\n    }\n  });\n  var a = {\n    pattern: /(\\d)(?:%|[a-z]+)/,\n    lookbehind: !0\n  },\n      n = {\n    pattern: /(^|[^\\w.-])-?\\d*\\.?\\d+/,\n    lookbehind: !0\n  };\n  e.languages.insertBefore(\"css\", \"function\", {\n    operator: {\n      pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n      lookbehind: !0\n    },\n    hexcode: {\n      pattern: /\\B#(?:[\\da-f]{1,2}){3,4}\\b/i,\n      alias: \"color\"\n    },\n    color: [/\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i, {\n      pattern: /\\b(?:rgb|hsl)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:rgb|hsl)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n      inside: {\n        unit: a,\n        number: n,\n        \"function\": /[\\w-]+(?=\\()/,\n        punctuation: /[(),]/\n      }\n    }],\n    entity: /\\\\[\\da-f]{1,8}/i,\n    unit: a,\n    number: n\n  });\n}(Prism);\n!function (d) {\n  d.languages.diff = {\n    coord: [/^(?:\\*{3}|-{3}|\\+{3}).*$/m, /^@@.*@@$/m, /^\\d+.*$/m]\n  };\n  var r = {\n    \"deleted-sign\": \"-\",\n    \"deleted-arrow\": \"<\",\n    \"inserted-sign\": \"+\",\n    \"inserted-arrow\": \">\",\n    unchanged: \" \",\n    diff: \"!\"\n  };\n  Object.keys(r).forEach(function (e) {\n    var n = r[e],\n        a = [];\n    /^\\w+$/.test(e) || a.push(/\\w+/.exec(e)[0]), \"diff\" === e && a.push(\"bold\"), d.languages.diff[e] = {\n      pattern: RegExp(\"^(?:[\" + n + \"].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+\", \"m\"),\n      alias: a\n    };\n  }), Object.defineProperty(d.languages.diff, \"PREFIXES\", {\n    value: r\n  });\n}(Prism);\n!function (h) {\n  function v(e, n) {\n    return \"___\" + e.toUpperCase() + n + \"___\";\n  }\n\n  Object.defineProperties(h.languages[\"markup-templating\"] = {}, {\n    buildPlaceholders: {\n      value: function value(a, r, e, o) {\n        if (a.language === r) {\n          var c = a.tokenStack = [];\n          a.code = a.code.replace(e, function (e) {\n            if (\"function\" == typeof o && !o(e)) return e;\n\n            for (var n, t = c.length; -1 !== a.code.indexOf(n = v(r, t));) {\n              ++t;\n            }\n\n            return c[t] = e, n;\n          }), a.grammar = h.languages.markup;\n        }\n      }\n    },\n    tokenizePlaceholders: {\n      value: function value(p, k) {\n        if (p.language === k && p.tokenStack) {\n          p.grammar = h.languages[k];\n          var m = 0,\n              d = Object.keys(p.tokenStack);\n          !function e(n) {\n            for (var t = 0; t < n.length && !(m >= d.length); t++) {\n              var a = n[t];\n\n              if (\"string\" == typeof a || a.content && \"string\" == typeof a.content) {\n                var r = d[m],\n                    o = p.tokenStack[r],\n                    c = \"string\" == typeof a ? a : a.content,\n                    i = v(k, r),\n                    u = c.indexOf(i);\n\n                if (-1 < u) {\n                  ++m;\n                  var g = c.substring(0, u),\n                      l = new h.Token(k, h.tokenize(o, p.grammar), \"language-\" + k, o),\n                      s = c.substring(u + i.length),\n                      f = [];\n                  g && f.push.apply(f, e([g])), f.push(l), s && f.push.apply(f, e([s])), \"string\" == typeof a ? n.splice.apply(n, [t, 1].concat(f)) : a.content = f;\n                }\n              } else a.content && e(a.content);\n            }\n\n            return n;\n          }(p.tokens);\n        }\n      }\n    }\n  });\n}(Prism);\n!function (n) {\n  n.languages.php = n.languages.extend(\"clike\", {\n    keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    \"boolean\": {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: \"constant\"\n    },\n    constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: !0\n    }\n  }), n.languages.insertBefore(\"php\", \"string\", {\n    \"shell-comment\": {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: !0,\n      alias: \"comment\"\n    }\n  }), n.languages.insertBefore(\"php\", \"comment\", {\n    delimiter: {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: \"important\"\n    }\n  }), n.languages.insertBefore(\"php\", \"keyword\", {\n    variable: /\\$+(?:\\w+\\b|(?={))/i,\n    \"package\": {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }), n.languages.insertBefore(\"php\", \"operator\", {\n    property: {\n      pattern: /(->)[\\w]+/,\n      lookbehind: !0\n    }\n  });\n  var e = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: !0,\n    inside: n.languages.php\n  };\n  n.languages.insertBefore(\"php\", \"string\", {\n    \"nowdoc-string\": {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: \"symbol\",\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    \"heredoc-string\": {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: \"symbol\",\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: e\n      }\n    },\n    \"single-quoted-string\": {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: !0,\n      alias: \"string\"\n    },\n    \"double-quoted-string\": {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        interpolation: e\n      }\n    }\n  }), delete n.languages.php.string, n.hooks.add(\"before-tokenize\", function (e) {\n    if (/<\\?/.test(e.code)) {\n      n.languages[\"markup-templating\"].buildPlaceholders(e, \"php\", /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi);\n    }\n  }), n.hooks.add(\"after-tokenize\", function (e) {\n    n.languages[\"markup-templating\"].tokenizePlaceholders(e, \"php\");\n  });\n}(Prism);\nPrism.languages.insertBefore(\"php\", \"variable\", {\n  \"this\": /\\$this\\b/,\n  global: /\\$(?:_(?:SERVER|GET|POST|FILES|REQUEST|SESSION|ENV|COOKIE)|GLOBALS|HTTP_RAW_POST_DATA|argc|argv|php_errormsg|http_response_header)\\b/,\n  scope: {\n    pattern: /\\b[\\w\\\\]+::/,\n    inside: {\n      keyword: /static|self|parent/,\n      punctuation: /::|\\\\/\n    }\n  }\n});\n!function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document && document.querySelector) {\n    var t,\n        n = function n() {\n      if (void 0 === t) {\n        var e = document.createElement(\"div\");\n        e.style.fontSize = \"13px\", e.style.lineHeight = \"1.5\", e.style.padding = 0, e.style.border = 0, e.innerHTML = \"&nbsp;<br />&nbsp;\", document.body.appendChild(e), t = 38 === e.offsetHeight, document.body.removeChild(e);\n      }\n\n      return t;\n    },\n        a = 0;\n\n    Prism.hooks.add(\"before-sanity-check\", function (e) {\n      var t = e.element.parentNode,\n          n = t && t.getAttribute(\"data-line\");\n\n      if (t && n && /pre/i.test(t.nodeName)) {\n        var i = 0;\n        r(\".line-highlight\", t).forEach(function (e) {\n          i += e.textContent.length, e.parentNode.removeChild(e);\n        }), i && /^( \\n)+$/.test(e.code.slice(-i)) && (e.code = e.code.slice(0, -i));\n      }\n    }), Prism.hooks.add(\"complete\", function e(t) {\n      var n = t.element.parentNode,\n          i = n && n.getAttribute(\"data-line\");\n\n      if (n && i && /pre/i.test(n.nodeName)) {\n        clearTimeout(a);\n        var r = Prism.plugins.lineNumbers,\n            o = t.plugins && t.plugins.lineNumbers;\n        if (l(n, \"line-numbers\") && r && !o) Prism.hooks.add(\"line-numbers\", e);else s(n, i)(), a = setTimeout(u, 1);\n      }\n    }), window.addEventListener(\"hashchange\", u), window.addEventListener(\"resize\", function () {\n      var t = [];\n      r(\"pre[data-line]\").forEach(function (e) {\n        t.push(s(e));\n      }), t.forEach(i);\n    });\n  }\n\n  function r(e, t) {\n    return Array.prototype.slice.call((t || document).querySelectorAll(e));\n  }\n\n  function l(e, t) {\n    return t = \" \" + t + \" \", -1 < (\" \" + e.className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(t);\n  }\n\n  function i(e) {\n    e();\n  }\n\n  function s(u, e, d) {\n    var t = (e = \"string\" == typeof e ? e : u.getAttribute(\"data-line\")).replace(/\\s+/g, \"\").split(\",\"),\n        c = +u.getAttribute(\"data-line-offset\") || 0,\n        f = (n() ? parseInt : parseFloat)(getComputedStyle(u).lineHeight),\n        h = l(u, \"line-numbers\"),\n        p = h ? u : u.querySelector(\"code\") || u,\n        m = [];\n    return t.forEach(function (e) {\n      var t = e.split(\"-\"),\n          n = +t[0],\n          i = +t[1] || n,\n          r = u.querySelector('.line-highlight[data-range=\"' + e + '\"]') || document.createElement(\"div\");\n\n      if (m.push(function () {\n        r.setAttribute(\"aria-hidden\", \"true\"), r.setAttribute(\"data-range\", e), r.className = (d || \"\") + \" line-highlight\";\n      }), h && Prism.plugins.lineNumbers) {\n        var o = Prism.plugins.lineNumbers.getLine(u, n),\n            a = Prism.plugins.lineNumbers.getLine(u, i);\n\n        if (o) {\n          var l = o.offsetTop + \"px\";\n          m.push(function () {\n            r.style.top = l;\n          });\n        }\n\n        if (a) {\n          var s = a.offsetTop - o.offsetTop + a.offsetHeight + \"px\";\n          m.push(function () {\n            r.style.height = s;\n          });\n        }\n      } else m.push(function () {\n        r.setAttribute(\"data-start\", n), n < i && r.setAttribute(\"data-end\", i), r.style.top = (n - c - 1) * f + \"px\", r.textContent = new Array(i - n + 2).join(\" \\n\");\n      });\n\n      m.push(function () {\n        p.appendChild(r);\n      });\n    }), function () {\n      m.forEach(i);\n    };\n  }\n\n  function u() {\n    var e = location.hash.slice(1);\n    r(\".temporary.line-highlight\").forEach(function (e) {\n      e.parentNode.removeChild(e);\n    });\n    var t = (e.match(/\\.([\\d,-]+)$/) || [, \"\"])[1];\n\n    if (t && !document.getElementById(e)) {\n      var n = e.slice(0, e.lastIndexOf(\".\")),\n          i = document.getElementById(n);\n      if (i) i.hasAttribute(\"data-line\") || i.setAttribute(\"data-line\", \"\"), s(i, t, \"temporary \")(), document.querySelector(\".temporary.line-highlight\").scrollIntoView();\n    }\n  }\n}();\n!function () {\n  if ((\"undefined\" == typeof self || self.Prism) && (\"undefined\" == typeof global || global.Prism)) {\n    var t = /\\b([a-z]{3,7}:\\/\\/|tel:)[\\w\\-+%~/.:=&@]+(?:\\?[\\w\\-+%~/.:=?&!$'()*,;@]*)?(?:#[\\w\\-+%~/.:#=?&!$'()*,;@]*)?/,\n        r = /\\b\\S+@[\\w.]+[a-z]{2}/,\n        a = /\\[([^\\]]+)]\\(([^)]+)\\)/,\n        l = [\"comment\", \"url\", \"attr-value\", \"string\"];\n    Prism.plugins.autolinker = {\n      processGrammar: function processGrammar(i) {\n        i && !i[\"url-link\"] && (Prism.languages.DFS(i, function (i, n, e) {\n          -1 < l.indexOf(e) && !Array.isArray(n) && (n.pattern || (n = this[i] = {\n            pattern: n\n          }), n.inside = n.inside || {}, \"comment\" == e && (n.inside[\"md-link\"] = a), \"attr-value\" == e ? Prism.languages.insertBefore(\"inside\", \"punctuation\", {\n            \"url-link\": t\n          }, n) : n.inside[\"url-link\"] = t, n.inside[\"email-link\"] = r);\n        }), i[\"url-link\"] = t, i[\"email-link\"] = r);\n      }\n    }, Prism.hooks.add(\"before-highlight\", function (i) {\n      Prism.plugins.autolinker.processGrammar(i.grammar);\n    }), Prism.hooks.add(\"wrap\", function (i) {\n      if (/-link$/.test(i.type)) {\n        i.tag = \"a\";\n        var n = i.content;\n        if (\"email-link\" == i.type && 0 != n.indexOf(\"mailto:\")) n = \"mailto:\" + n;else if (\"md-link\" == i.type) {\n          var e = i.content.match(a);\n          n = e[2], i.content = e[1];\n        }\n        i.attributes.href = n;\n\n        try {\n          i.content = decodeURIComponent(i.content);\n        } catch (i) {}\n      }\n    });\n  }\n}();\n!function () {\n  if ((\"undefined\" == typeof self || self.Prism) && (\"undefined\" == typeof global || global.Prism)) {\n    var r = {\n      pattern: /(.)\\bdata:[^\\/]+\\/[^,]+,(?:(?!\\1)[\\s\\S]|\\\\\\1)+(?=\\1)/,\n      lookbehind: !0,\n      inside: {\n        \"language-css\": {\n          pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?css,)[\\s\\S]+/,\n          lookbehind: !0\n        },\n        \"language-javascript\": {\n          pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?javascript,)[\\s\\S]+/,\n          lookbehind: !0\n        },\n        \"language-json\": {\n          pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?json,)[\\s\\S]+/,\n          lookbehind: !0\n        },\n        \"language-markup\": {\n          pattern: /(data:[^\\/]+\\/(?:[^+,]+\\+)?(?:html|xml),)[\\s\\S]+/,\n          lookbehind: !0\n        }\n      }\n    },\n        e = [\"url\", \"attr-value\", \"string\"];\n    Prism.plugins.dataURIHighlight = {\n      processGrammar: function processGrammar(i) {\n        i && !i[\"data-uri\"] && (Prism.languages.DFS(i, function (i, a, n) {\n          -1 < e.indexOf(n) && !Array.isArray(a) && (a.pattern || (a = this[i] = {\n            pattern: a\n          }), a.inside = a.inside || {}, \"attr-value\" == n ? Prism.languages.insertBefore(\"inside\", a.inside[\"url-link\"] ? \"url-link\" : \"punctuation\", {\n            \"data-uri\": r\n          }, a) : a.inside[\"url-link\"] ? Prism.languages.insertBefore(\"inside\", \"url-link\", {\n            \"data-uri\": r\n          }, a) : a.inside[\"data-uri\"] = r);\n        }), i[\"data-uri\"] = r);\n      }\n    }, Prism.hooks.add(\"before-highlight\", function (i) {\n      if (r.pattern.test(i.code)) for (var a in r.inside) {\n        if (r.inside.hasOwnProperty(a) && !r.inside[a].inside && r.inside[a].pattern.test(i.code)) {\n          var n = a.match(/^language-(.+)/)[1];\n          Prism.languages[n] && (r.inside[a].inside = {\n            rest: (e = Prism.languages[n], Prism.plugins.autolinker && Prism.plugins.autolinker.processGrammar(e), e)\n          });\n        }\n      }\n      var e;\n      Prism.plugins.dataURIHighlight.processGrammar(i.grammar);\n    });\n  }\n}();\n!function () {\n  if (\"undefined\" != typeof self && self.Prism || \"undefined\" != typeof global && global.Prism) {\n    var n = function n(_n) {\n      return _n;\n    },\n        s = {\n      classMap: n,\n      prefixString: \"\"\n    };\n\n    Prism.plugins.customClass = {\n      map: function map(i) {\n        s.classMap = \"function\" == typeof i ? i : function (n) {\n          return i[n] || n;\n        };\n      },\n      prefix: function prefix(n) {\n        s.prefixString = n;\n      }\n    }, Prism.hooks.add(\"wrap\", function (i) {\n      (s.classMap !== n || s.prefixString) && (i.classes = i.classes.map(function (n) {\n        return s.prefixString + s.classMap(n, i.language);\n      }));\n    });\n  }\n}();\n\"undefined\" != typeof self && self.Prism && self.document && document.querySelector && (self.Prism.fileHighlight = function (e) {\n  e = e || document;\n  var i = {\n    js: \"javascript\",\n    py: \"python\",\n    rb: \"ruby\",\n    ps1: \"powershell\",\n    psm1: \"powershell\",\n    sh: \"bash\",\n    bat: \"batch\",\n    h: \"c\",\n    tex: \"latex\"\n  };\n  Array.prototype.slice.call(e.querySelectorAll(\"pre[data-src]\")).forEach(function (e) {\n    if (!e.hasAttribute(\"data-src-loaded\")) {\n      for (var t, a = e.getAttribute(\"data-src\"), s = e, n = /\\blang(?:uage)?-([\\w-]+)\\b/i; s && !n.test(s.className);) {\n        s = s.parentNode;\n      }\n\n      if (s && (t = (e.className.match(n) || [, \"\"])[1]), !t) {\n        var r = (a.match(/\\.(\\w+)$/) || [, \"\"])[1];\n        t = i[r] || r;\n      }\n\n      var o = document.createElement(\"code\");\n      o.className = \"language-\" + t, e.textContent = \"\", o.textContent = \"Loading…\", e.appendChild(o);\n      var l = new XMLHttpRequest();\n      l.open(\"GET\", a, !0), l.onreadystatechange = function () {\n        4 == l.readyState && (l.status < 400 && l.responseText ? (o.textContent = l.responseText, Prism.highlightElement(o), e.setAttribute(\"data-src-loaded\", \"\")) : 400 <= l.status ? o.textContent = \"✖ Error \" + l.status + \" while fetching file: \" + l.statusText : o.textContent = \"✖ Error: File does not exist or is empty\");\n      }, l.send(null);\n    }\n  });\n}, document.addEventListener(\"DOMContentLoaded\", function () {\n  self.Prism.fileHighlight();\n}));\n!function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document) {\n    var r = [],\n        i = {},\n        a = function a() {};\n\n    Prism.plugins.toolbar = {};\n\n    var t = Prism.plugins.toolbar.registerButton = function (t, a) {\n      var e;\n      e = \"function\" == typeof a ? a : function (t) {\n        var e;\n        return \"function\" == typeof a.onClick ? ((e = document.createElement(\"button\")).type = \"button\", e.addEventListener(\"click\", function () {\n          a.onClick.call(this, t);\n        })) : \"string\" == typeof a.url ? (e = document.createElement(\"a\")).href = a.url : e = document.createElement(\"span\"), a.className && e.classList.add(a.className), e.textContent = a.text, e;\n      }, t in i ? console.warn('There is a button with the key \"' + t + '\" registered already.') : r.push(i[t] = e);\n    },\n        e = Prism.plugins.toolbar.hook = function (n) {\n      var t = n.element.parentNode;\n\n      if (t && /pre/i.test(t.nodeName) && !t.parentNode.classList.contains(\"code-toolbar\")) {\n        var e = document.createElement(\"div\");\n        e.classList.add(\"code-toolbar\"), t.parentNode.insertBefore(e, t), e.appendChild(t);\n        var o = document.createElement(\"div\");\n        o.classList.add(\"toolbar\"), document.body.hasAttribute(\"data-toolbar-order\") && (r = document.body.getAttribute(\"data-toolbar-order\").split(\",\").map(function (t) {\n          return i[t] || a;\n        })), r.forEach(function (t) {\n          var e = t(n);\n\n          if (e) {\n            var a = document.createElement(\"div\");\n            a.classList.add(\"toolbar-item\"), a.appendChild(e), o.appendChild(a);\n          }\n        }), e.appendChild(o);\n      }\n    };\n\n    t(\"label\", function (t) {\n      var e = t.element.parentNode;\n\n      if (e && /pre/i.test(e.nodeName) && e.hasAttribute(\"data-label\")) {\n        var a,\n            n,\n            o = e.getAttribute(\"data-label\");\n\n        try {\n          n = document.querySelector(\"template#\" + o);\n        } catch (t) {}\n\n        return n ? a = n.content : (e.hasAttribute(\"data-url\") ? (a = document.createElement(\"a\")).href = e.getAttribute(\"data-url\") : a = document.createElement(\"span\"), a.textContent = o), a;\n      }\n    }), Prism.hooks.add(\"complete\", e);\n  }\n}();\n\"undefined\" != typeof self && !self.Prism || \"undefined\" != typeof global && !global.Prism || Prism.hooks.add(\"wrap\", function (e) {\n  \"keyword\" === e.type && e.classes.push(\"keyword-\" + e.content);\n});\n!function () {\n  if (\"undefined\" != typeof self && \"undefined\" != typeof Prism && \"undefined\" != typeof document) {\n    var i = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/g,\n        t = /^#?(?=(?:[\\da-f]{1,2}){3,4}$)([\\da-f][\\da-f]?)([\\da-f][\\da-f]?)([\\da-f][\\da-f]?)([\\da-f][\\da-f]?)?$/i,\n        d = [function (n) {\n      var e = t.exec(n);\n\n      if (e) {\n        var o = n.length <= 4 ? 1 / 15 : 1 / 255;\n        return \"rgba(\" + e.slice(1, 4).map(function (n) {\n          return String(Math.round(parseInt(n, 16) * o * 255));\n        }).join(\",\") + \",\" + (void 0 === e[4] ? \"1\" : (parseInt(e[4], 16) * o).toFixed(3)) + \")\";\n      }\n    }, function (n) {\n      var e = new Option().style;\n      return e.color = n, e.color ? n : void 0;\n    }];\n    Prism.hooks.add(\"wrap\", function (n) {\n      if (\"color\" === n.type || \"hexcode\" === n.type) {\n        for (var e, o = n.content, t = o.split(i).join(\"\"), r = 0, a = d.length; r < a && !e; r++) {\n          e = d[r](t);\n        }\n\n        if (!e) return;\n        var f = '<span class=\"inline-color\" style=\"background-color:' + e + ';\"></span>';\n        n.content = f + o;\n      }\n    });\n  }\n}();\n!function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document && document.createElement) {\n    var c = {\n      javascript: \"clike\",\n      actionscript: \"javascript\",\n      arduino: \"cpp\",\n      aspnet: [\"markup\", \"csharp\"],\n      bison: \"c\",\n      c: \"clike\",\n      csharp: \"clike\",\n      cpp: \"c\",\n      coffeescript: \"javascript\",\n      crystal: \"ruby\",\n      \"css-extras\": \"css\",\n      d: \"clike\",\n      dart: \"clike\",\n      django: \"markup-templating\",\n      ejs: [\"javascript\", \"markup-templating\"],\n      etlua: [\"lua\", \"markup-templating\"],\n      erb: [\"ruby\", \"markup-templating\"],\n      fsharp: \"clike\",\n      \"firestore-security-rules\": \"clike\",\n      flow: \"javascript\",\n      ftl: \"markup-templating\",\n      glsl: \"clike\",\n      gml: \"clike\",\n      go: \"clike\",\n      groovy: \"clike\",\n      haml: \"ruby\",\n      handlebars: \"markup-templating\",\n      haxe: \"clike\",\n      java: \"clike\",\n      javadoc: [\"markup\", \"java\", \"javadoclike\"],\n      jolie: \"clike\",\n      jsdoc: [\"javascript\", \"javadoclike\"],\n      \"js-extras\": \"javascript\",\n      \"js-templates\": \"javascript\",\n      jsonp: \"json\",\n      json5: \"json\",\n      kotlin: \"clike\",\n      less: \"css\",\n      lilypond: \"scheme\",\n      markdown: \"markup\",\n      \"markup-templating\": \"markup\",\n      n4js: \"javascript\",\n      nginx: \"clike\",\n      objectivec: \"c\",\n      opencl: \"cpp\",\n      parser: \"markup\",\n      php: [\"clike\", \"markup-templating\"],\n      phpdoc: [\"php\", \"javadoclike\"],\n      \"php-extras\": \"php\",\n      plsql: \"sql\",\n      processing: \"clike\",\n      protobuf: \"clike\",\n      pug: [\"markup\", \"javascript\"],\n      qore: \"clike\",\n      jsx: [\"markup\", \"javascript\"],\n      tsx: [\"jsx\", \"typescript\"],\n      reason: \"clike\",\n      ruby: \"clike\",\n      sass: \"css\",\n      scss: \"css\",\n      scala: \"java\",\n      \"shell-session\": \"bash\",\n      smarty: \"markup-templating\",\n      solidity: \"clike\",\n      soy: \"markup-templating\",\n      sparql: \"turtle\",\n      sqf: \"clike\",\n      swift: \"clike\",\n      tap: \"yaml\",\n      textile: \"markup\",\n      tt2: [\"clike\", \"markup-templating\"],\n      twig: \"markup\",\n      typescript: \"javascript\",\n      \"t4-cs\": [\"t4-templating\", \"csharp\"],\n      \"t4-vb\": [\"t4-templating\", \"visual-basic\"],\n      vala: \"clike\",\n      vbnet: \"basic\",\n      velocity: \"markup\",\n      wiki: \"markup\",\n      xeora: \"markup\",\n      xquery: \"markup\"\n    },\n        l = {\n      html: \"markup\",\n      xml: \"markup\",\n      svg: \"markup\",\n      mathml: \"markup\",\n      js: \"javascript\",\n      g4: \"antlr4\",\n      adoc: \"asciidoc\",\n      shell: \"bash\",\n      rbnf: \"bnf\",\n      cs: \"csharp\",\n      dotnet: \"csharp\",\n      coffee: \"coffeescript\",\n      jinja2: \"django\",\n      \"dns-zone\": \"dns-zone-file\",\n      dockerfile: \"docker\",\n      gamemakerlanguage: \"gml\",\n      hs: \"haskell\",\n      tex: \"latex\",\n      context: \"latex\",\n      ly: \"lilypond\",\n      emacs: \"lisp\",\n      elisp: \"lisp\",\n      \"emacs-lisp\": \"lisp\",\n      md: \"markdown\",\n      moon: \"moonscript\",\n      n4jsd: \"n4js\",\n      objectpascal: \"pascal\",\n      px: \"pcaxis\",\n      py: \"python\",\n      robot: \"robot-framework\",\n      rb: \"ruby\",\n      rq: \"sparql\",\n      trig: \"turtle\",\n      ts: \"typescript\",\n      t4: \"t4-cs\",\n      vb: \"visual-basic\",\n      xeoracube: \"xeora\",\n      yml: \"yaml\"\n    },\n        n = {},\n        a = \"components/\",\n        e = Prism.util.currentScript();\n\n    if (e) {\n      var t = /\\bplugins\\/autoloader\\/prism-autoloader\\.(?:min\\.)js$/i,\n          s = /[\\w-]+\\.(?:min\\.)js$/i;\n      if (e.hasAttribute(\"data-autoloader-path\")) a = e.getAttribute(\"data-autoloader-path\").trim().replace(/\\/?$/, \"/\");else {\n        var i = e.src;\n        t.test(i) ? a = i.replace(t, \"components/\") : s.test(i) && (a = i.replace(s, \"components/\"));\n      }\n    }\n\n    var p = Prism.plugins.autoloader = {\n      languages_path: a,\n      use_minified: !0,\n      loadLanguages: o\n    };\n    Prism.hooks.add(\"complete\", function (a) {\n      a.element && a.language && !a.grammar && \"none\" !== a.language && function (a, e) {\n        a in l && (a = l[a]);\n        var t = e.getAttribute(\"data-dependencies\"),\n            s = e.parentElement;\n        !t && s && \"pre\" === s.tagName.toLowerCase() && (t = s.getAttribute(\"data-dependencies\")), o(t = t ? t.split(/\\s*,\\s*/g) : [], function () {\n          m(a, function () {\n            Prism.highlightElement(e);\n          });\n        });\n      }(a.language, a.element);\n    });\n  }\n\n  function o(a, e, t) {\n    \"string\" == typeof a && (a = [a]);\n    var s = a.length,\n        i = 0,\n        r = !1;\n\n    function c() {\n      r || ++i === s && e && e(a);\n    }\n\n    0 !== s ? a.forEach(function (a) {\n      m(a, c, function () {\n        r || (r = !0, t && t(a));\n      });\n    }) : e && setTimeout(e, 0);\n  }\n\n  function m(e, t, s) {\n    var i = 0 <= e.indexOf(\"!\");\n    e = e.replace(\"!\", \"\"), e = l[e] || e;\n\n    var a = function a() {\n      var a = n[e];\n      if (a || (a = n[e] = {\n        callbacks: []\n      }), a.callbacks.push({\n        success: t,\n        error: s\n      }), !i && Prism.languages[e]) u(e, \"success\");else if (!i && a.error) u(e, \"error\");else if (i || !a.loading) {\n        a.loading = !0, function (a, e, t) {\n          var s = document.createElement(\"script\");\n          s.src = a, s.async = !0, s.onload = function () {\n            document.body.removeChild(s), e && e();\n          }, s.onerror = function () {\n            document.body.removeChild(s), t && t();\n          }, document.body.appendChild(s);\n        }(function (a) {\n          return p.languages_path + \"prism-\" + a + (p.use_minified ? \".min\" : \"\") + \".js\";\n        }(e), function () {\n          a.loading = !1, u(e, \"success\");\n        }, function () {\n          a.loading = !1, a.error = !0, u(e, \"error\");\n        });\n      }\n    },\n        r = c[e];\n\n    r && r.length ? o(r, a, s) : a();\n  }\n\n  function u(a, e) {\n    if (n[a]) {\n      for (var t = n[a].callbacks, s = 0, i = t.length; s < i; s++) {\n        var r = t[s][e];\n        r && setTimeout(r, 0);\n      }\n\n      t.length = 0;\n    }\n  }\n}();\n!function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document) {\n    var u = /(?:^|\\s)command-line(?:\\s|$)/;\n    Prism.hooks.add(\"before-highlight\", function (e) {\n      var t = e.vars = e.vars || {},\n          a = t[\"command-line\"] = t[\"command-line\"] || {};\n\n      if (!a.complete && e.code) {\n        var n = e.element.parentNode;\n        if (n && /pre/i.test(n.nodeName) && (u.test(n.className) || u.test(e.element.className))) {\n          if (e.element.querySelector(\".command-line-prompt\")) a.complete = !0;else {\n            var r = e.code.split(\"\\n\");\n            a.numberOfLines = r.length;\n            var s = a.outputLines = [],\n                o = n.getAttribute(\"data-output\"),\n                i = n.getAttribute(\"data-filter-output\");\n\n            if (o || \"\" === o) {\n              o = o.split(\",\");\n\n              for (var l = 0; l < o.length; l++) {\n                var m = o[l].split(\"-\"),\n                    p = parseInt(m[0], 10),\n                    d = 2 === m.length ? parseInt(m[1], 10) : p;\n\n                if (!isNaN(p) && !isNaN(d)) {\n                  p < 1 && (p = 1), d > r.length && (d = r.length), d--;\n\n                  for (var c = --p; c <= d; c++) {\n                    s[c] = r[c], r[c] = \"\";\n                  }\n                }\n              }\n            } else if (i) for (l = 0; l < r.length; l++) {\n              0 === r[l].indexOf(i) && (s[l] = r[l].slice(i.length), r[l] = \"\");\n            }\n\n            e.code = r.join(\"\\n\");\n          }\n        } else a.complete = !0;\n      } else a.complete = !0;\n    }), Prism.hooks.add(\"before-insert\", function (e) {\n      var t = e.vars = e.vars || {},\n          a = t[\"command-line\"] = t[\"command-line\"] || {};\n\n      if (!a.complete) {\n        for (var n = e.highlightedCode.split(\"\\n\"), r = 0, s = (a.outputLines || []).length; r < s; r++) {\n          a.outputLines.hasOwnProperty(r) && (n[r] = a.outputLines[r]);\n        }\n\n        e.highlightedCode = n.join(\"\\n\");\n      }\n    }), Prism.hooks.add(\"complete\", function (e) {\n      var t = e.vars = e.vars || {},\n          a = t[\"command-line\"] = t[\"command-line\"] || {};\n\n      if (!a.complete) {\n        var n = e.element.parentNode;\n        u.test(e.element.className) && (e.element.className = e.element.className.replace(u, \" \")), u.test(n.className) || (n.className += \" command-line\");\n\n        var r = function r(e, t) {\n          return (n.getAttribute(e) || t).replace(/\"/g, \"&quot\");\n        },\n            s = new Array((a.numberOfLines || 0) + 1),\n            o = r(\"data-prompt\", \"\");\n\n        if (\"\" !== o) s = s.join('<span data-prompt=\"' + o + '\"></span>');else {\n          var i = r(\"data-user\", \"user\"),\n              l = r(\"data-host\", \"localhost\");\n          s = s.join('<span data-user=\"' + i + '\" data-host=\"' + l + '\"></span>');\n        }\n        var m = document.createElement(\"span\");\n        m.className = \"command-line-prompt\", m.innerHTML = s;\n\n        for (var p = 0, d = (a.outputLines || []).length; p < d; p++) {\n          if (a.outputLines.hasOwnProperty(p)) {\n            var c = m.children[p];\n            c.removeAttribute(\"data-user\"), c.removeAttribute(\"data-host\"), c.removeAttribute(\"data-prompt\");\n          }\n        }\n\n        e.element.insertBefore(m, e.element.firstChild), a.complete = !0;\n      }\n    });\n  }\n}();\n!function () {\n  var i = Object.assign || function (e, n) {\n    for (var t in n) {\n      n.hasOwnProperty(t) && (e[t] = n[t]);\n    }\n\n    return e;\n  };\n\n  function e(e) {\n    this.defaults = i({}, e);\n  }\n\n  function l(e) {\n    for (var n = 0, t = 0; t < e.length; ++t) {\n      e.charCodeAt(t) == \"\\t\".charCodeAt(0) && (n += 3);\n    }\n\n    return e.length + n;\n  }\n\n  e.prototype = {\n    setDefaults: function setDefaults(e) {\n      this.defaults = i(this.defaults, e);\n    },\n    normalize: function normalize(e, n) {\n      for (var t in n = i(this.defaults, n)) {\n        var r = t.replace(/-(\\w)/g, function (e, n) {\n          return n.toUpperCase();\n        });\n        \"normalize\" !== t && \"setDefaults\" !== r && n[t] && this[r] && (e = this[r].call(this, e, n[t]));\n      }\n\n      return e;\n    },\n    leftTrim: function leftTrim(e) {\n      return e.replace(/^\\s+/, \"\");\n    },\n    rightTrim: function rightTrim(e) {\n      return e.replace(/\\s+$/, \"\");\n    },\n    tabsToSpaces: function tabsToSpaces(e, n) {\n      return n = 0 | n || 4, e.replace(/\\t/g, new Array(++n).join(\" \"));\n    },\n    spacesToTabs: function spacesToTabs(e, n) {\n      return n = 0 | n || 4, e.replace(RegExp(\" {\" + n + \"}\", \"g\"), \"\\t\");\n    },\n    removeTrailing: function removeTrailing(e) {\n      return e.replace(/\\s*?$/gm, \"\");\n    },\n    removeInitialLineFeed: function removeInitialLineFeed(e) {\n      return e.replace(/^(?:\\r?\\n|\\r)/, \"\");\n    },\n    removeIndent: function removeIndent(e) {\n      var n = e.match(/^[^\\S\\n\\r]*(?=\\S)/gm);\n      return n && n[0].length ? (n.sort(function (e, n) {\n        return e.length - n.length;\n      }), n[0].length ? e.replace(RegExp(\"^\" + n[0], \"gm\"), \"\") : e) : e;\n    },\n    indent: function indent(e, n) {\n      return e.replace(/^[^\\S\\n\\r]*(?=\\S)/gm, new Array(++n).join(\"\\t\") + \"$&\");\n    },\n    breakLines: function breakLines(e, n) {\n      n = !0 === n ? 80 : 0 | n || 80;\n\n      for (var t = e.split(\"\\n\"), r = 0; r < t.length; ++r) {\n        if (!(l(t[r]) <= n)) {\n          for (var i = t[r].split(/(\\s+)/g), o = 0, a = 0; a < i.length; ++a) {\n            var s = l(i[a]);\n            n < (o += s) && (i[a] = \"\\n\" + i[a], o = s);\n          }\n\n          t[r] = i.join(\"\");\n        }\n      }\n\n      return t.join(\"\\n\");\n    }\n  },  true && module.exports && (module.exports = e), \"undefined\" != typeof Prism && (Prism.plugins.NormalizeWhitespace = new e({\n    \"remove-trailing\": !0,\n    \"remove-indent\": !0,\n    \"left-trim\": !0,\n    \"right-trim\": !0\n  }), Prism.hooks.add(\"before-sanity-check\", function (e) {\n    var n = Prism.plugins.NormalizeWhitespace;\n    if (!e.settings || !1 !== e.settings[\"whitespace-normalization\"]) if (e.element && e.element.parentNode || !e.code) {\n      var t = e.element.parentNode,\n          r = /(?:^|\\s)no-whitespace-normalization(?:\\s|$)/;\n\n      if (e.code && t && \"pre\" === t.nodeName.toLowerCase() && !r.test(t.className) && !r.test(e.element.className)) {\n        for (var i = t.childNodes, o = \"\", a = \"\", s = !1, l = 0; l < i.length; ++l) {\n          var c = i[l];\n          c == e.element ? s = !0 : \"#text\" === c.nodeName && (s ? a += c.nodeValue : o += c.nodeValue, t.removeChild(c), --l);\n        }\n\n        if (e.element.children.length && Prism.plugins.KeepMarkup) {\n          var u = o + e.element.innerHTML + a;\n          e.element.innerHTML = n.normalize(u, e.settings), e.code = e.element.textContent;\n        } else e.code = o + e.code + a, e.code = n.normalize(e.code, e.settings);\n      }\n    } else e.code = n.normalize(e.code, e.settings);\n  }));\n}();\n!function () {\n  if ((\"undefined\" == typeof self || self.Prism) && (\"undefined\" == typeof global || global.Prism)) {\n    var i = {\n      tab: /\\t/,\n      crlf: /\\r\\n/,\n      lf: /\\n/,\n      cr: /\\r/,\n      space: / /\n    };\n    Prism.hooks.add(\"before-highlight\", function (r) {\n      s(r.grammar);\n    });\n  }\n\n  function f(r, e) {\n    var i = r[e];\n\n    switch (Prism.util.type(i)) {\n      case \"RegExp\":\n        var a = {};\n        r[e] = {\n          pattern: i,\n          inside: a\n        }, s(a);\n        break;\n\n      case \"Array\":\n        for (var n = 0, t = i.length; n < t; n++) {\n          f(i, n);\n        }\n\n        break;\n\n      default:\n        s(a = i.inside || (i.inside = {}));\n    }\n  }\n\n  function s(r) {\n    if (r && !r.tab) {\n      for (var e in i) {\n        i.hasOwnProperty(e) && (r[e] = i[e]);\n      }\n\n      for (var e in r) {\n        r.hasOwnProperty(e) && !i[e] && (\"rest\" === e ? s(r.rest) : f(r, e));\n      }\n    }\n  }\n}();\n!function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document) if (Prism.plugins.toolbar) {\n    var r = {\n      html: \"HTML\",\n      xml: \"XML\",\n      svg: \"SVG\",\n      mathml: \"MathML\",\n      css: \"CSS\",\n      clike: \"C-like\",\n      js: \"JavaScript\",\n      abap: \"ABAP\",\n      abnf: \"Augmented Backus–Naur form\",\n      antlr4: \"ANTLR4\",\n      g4: \"ANTLR4\",\n      apacheconf: \"Apache Configuration\",\n      apl: \"APL\",\n      aql: \"AQL\",\n      arff: \"ARFF\",\n      asciidoc: \"AsciiDoc\",\n      adoc: \"AsciiDoc\",\n      asm6502: \"6502 Assembly\",\n      aspnet: \"ASP.NET (C#)\",\n      autohotkey: \"AutoHotkey\",\n      autoit: \"AutoIt\",\n      shell: \"Bash\",\n      basic: \"BASIC\",\n      bbcode: \"BBcode\",\n      bnf: \"Backus–Naur form\",\n      rbnf: \"Routing Backus–Naur form\",\n      csharp: \"C#\",\n      cs: \"C#\",\n      dotnet: \"C#\",\n      cpp: \"C++\",\n      cil: \"CIL\",\n      coffee: \"CoffeeScript\",\n      cmake: \"CMake\",\n      csp: \"Content-Security-Policy\",\n      \"css-extras\": \"CSS Extras\",\n      django: \"Django/Jinja2\",\n      jinja2: \"Django/Jinja2\",\n      \"dns-zone-file\": \"DNS zone file\",\n      \"dns-zone\": \"DNS zone file\",\n      dockerfile: \"Docker\",\n      ebnf: \"Extended Backus–Naur form\",\n      ejs: \"EJS\",\n      etlua: \"Embedded Lua templating\",\n      erb: \"ERB\",\n      fsharp: \"F#\",\n      \"firestore-security-rules\": \"Firestore security rules\",\n      ftl: \"FreeMarker Template Language\",\n      gcode: \"G-code\",\n      gdscript: \"GDScript\",\n      gedcom: \"GEDCOM\",\n      glsl: \"GLSL\",\n      gml: \"GameMaker Language\",\n      gamemakerlanguage: \"GameMaker Language\",\n      graphql: \"GraphQL\",\n      hs: \"Haskell\",\n      hcl: \"HCL\",\n      http: \"HTTP\",\n      hpkp: \"HTTP Public-Key-Pins\",\n      hsts: \"HTTP Strict-Transport-Security\",\n      ichigojam: \"IchigoJam\",\n      inform7: \"Inform 7\",\n      javadoc: \"JavaDoc\",\n      javadoclike: \"JavaDoc-like\",\n      javastacktrace: \"Java stack trace\",\n      jq: \"JQ\",\n      jsdoc: \"JSDoc\",\n      \"js-extras\": \"JS Extras\",\n      \"js-templates\": \"JS Templates\",\n      json: \"JSON\",\n      jsonp: \"JSONP\",\n      json5: \"JSON5\",\n      latex: \"LaTeX\",\n      tex: \"TeX\",\n      context: \"ConTeXt\",\n      lilypond: \"LilyPond\",\n      ly: \"LilyPond\",\n      emacs: \"Lisp\",\n      elisp: \"Lisp\",\n      \"emacs-lisp\": \"Lisp\",\n      lolcode: \"LOLCODE\",\n      md: \"Markdown\",\n      \"markup-templating\": \"Markup templating\",\n      matlab: \"MATLAB\",\n      mel: \"MEL\",\n      moon: \"MoonScript\",\n      n1ql: \"N1QL\",\n      n4js: \"N4JS\",\n      n4jsd: \"N4JS\",\n      \"nand2tetris-hdl\": \"Nand To Tetris HDL\",\n      nasm: \"NASM\",\n      nginx: \"nginx\",\n      nsis: \"NSIS\",\n      objectivec: \"Objective-C\",\n      ocaml: \"OCaml\",\n      opencl: \"OpenCL\",\n      parigp: \"PARI/GP\",\n      objectpascal: \"Object Pascal\",\n      pcaxis: \"PC-Axis\",\n      px: \"PC-Axis\",\n      php: \"PHP\",\n      phpdoc: \"PHPDoc\",\n      \"php-extras\": \"PHP Extras\",\n      plsql: \"PL/SQL\",\n      powershell: \"PowerShell\",\n      properties: \".properties\",\n      protobuf: \"Protocol Buffers\",\n      py: \"Python\",\n      q: \"Q (kdb+ database)\",\n      jsx: \"React JSX\",\n      tsx: \"React TSX\",\n      renpy: \"Ren'py\",\n      rest: \"reST (reStructuredText)\",\n      \"robot-framework\": \"Robot Framework\",\n      robot: \"Robot Framework\",\n      rb: \"Ruby\",\n      sas: \"SAS\",\n      sass: \"Sass (Sass)\",\n      scss: \"Sass (Scss)\",\n      \"shell-session\": \"Shell session\",\n      solidity: \"Solidity (Ethereum)\",\n      soy: \"Soy (Closure Template)\",\n      sparql: \"SPARQL\",\n      rq: \"SPARQL\",\n      \"splunk-spl\": \"Splunk SPL\",\n      sqf: \"SQF: Status Quo Function (Arma 3)\",\n      sql: \"SQL\",\n      tap: \"TAP\",\n      toml: \"TOML\",\n      tt2: \"Template Toolkit 2\",\n      trig: \"TriG\",\n      ts: \"TypeScript\",\n      \"t4-cs\": \"T4 Text Templates (C#)\",\n      t4: \"T4 Text Templates (C#)\",\n      \"t4-vb\": \"T4 Text Templates (VB)\",\n      \"t4-templating\": \"T4 templating\",\n      vbnet: \"VB.Net\",\n      vhdl: \"VHDL\",\n      vim: \"vim\",\n      \"visual-basic\": \"Visual Basic\",\n      vb: \"Visual Basic\",\n      wasm: \"WebAssembly\",\n      wiki: \"Wiki markup\",\n      xeoracube: \"XeoraCube\",\n      xojo: \"Xojo (REALbasic)\",\n      xquery: \"XQuery\",\n      yaml: \"YAML\",\n      yml: \"YAML\"\n    };\n    Prism.plugins.toolbar.registerButton(\"show-language\", function (e) {\n      var a = e.element.parentNode;\n\n      if (a && /pre/i.test(a.nodeName)) {\n        var s,\n            t = a.getAttribute(\"data-language\") || r[e.language] || ((s = e.language) ? (s.substring(0, 1).toUpperCase() + s.substring(1)).replace(/s(?=cript)/, \"S\") : s);\n\n        if (t) {\n          var o = document.createElement(\"span\");\n          return o.textContent = t, o;\n        }\n      }\n    });\n  } else console.warn(\"Show Languages plugin loaded before Toolbar plugin.\");\n}();\n!function () {\n  if (\"undefined\" != typeof self && self.Prism && self.document) {\n    var c = /(?:^|\\s)match-braces(?:\\s|$)/,\n        a = /(?:^|\\s)brace-hover(?:\\s|$)/,\n        l = /(?:^|\\s)brace-selected(?:\\s|$)/,\n        n = /(?:^|\\s)no-brace-hover(?:\\s|$)/,\n        t = /(?:^|\\s)no-brace-select(?:\\s|$)/,\n        u = {\n      \"(\": \")\",\n      \"[\": \"]\",\n      \"{\": \"}\"\n    },\n        f = {\n      \"(\": \"brace-round\",\n      \"[\": \"brace-square\",\n      \"{\": \"brace-curly\"\n    },\n        m = 0,\n        r = /^(pair-\\d+-)(open|close)$/;\n    Prism.hooks.add(\"complete\", function (e) {\n      var a = e.element,\n          n = a.parentElement;\n\n      if (n && \"PRE\" == n.tagName) {\n        for (var t = [], r = a; r; r = r.parentElement) {\n          if (c.test(r.className)) {\n            t.push(\"(\", \"[\", \"{\");\n            break;\n          }\n        }\n\n        if (0 != t.length) {\n          n.__listenerAdded || (n.addEventListener(\"mousedown\", function () {\n            var e = n.querySelector(\"code\");\n            Array.prototype.slice.call(e.querySelectorAll(\".brace-selected\")).forEach(function (e) {\n              e.className = e.className.replace(l, \" \");\n            });\n          }), Object.defineProperty(n, \"__listenerAdded\", {\n            value: !0\n          }));\n          var o = Array.prototype.slice.call(a.querySelectorAll(\"span.token.punctuation\")),\n              i = [];\n          t.forEach(function (e) {\n            for (var a = u[e], n = f[e], t = [], r = [], s = 0; s < o.length; s++) {\n              var c = o[s];\n\n              if (0 == c.childElementCount) {\n                var l = c.textContent;\n                l === e ? (i.push({\n                  index: s,\n                  open: !0,\n                  element: c\n                }), c.className += \" \" + n, c.className += \" brace-open\", r.push(s)) : l === a && (i.push({\n                  index: s,\n                  open: !1,\n                  element: c\n                }), c.className += \" \" + n, c.className += \" brace-close\", r.length && t.push([s, r.pop()]));\n              }\n            }\n\n            t.forEach(function (e) {\n              var a = \"pair-\" + m++ + \"-\",\n                  n = o[e[0]],\n                  t = o[e[1]];\n              n.id = a + \"open\", t.id = a + \"close\", [n, t].forEach(function (e) {\n                e.addEventListener(\"mouseenter\", p), e.addEventListener(\"mouseleave\", d), e.addEventListener(\"click\", h);\n              });\n            });\n          });\n          var s = 0;\n          i.sort(function (e, a) {\n            return e.index - a.index;\n          }), i.forEach(function (e) {\n            e.open ? (e.element.className += \" brace-level-\" + (s % 12 + 1), s++) : (s = Math.max(0, s - 1), e.element.className += \" brace-level-\" + (s % 12 + 1));\n          });\n        }\n      }\n    });\n  }\n\n  function s(e) {\n    var a = r.exec(e.id);\n    return document.querySelector(\"#\" + a[1] + (\"open\" == a[2] ? \"close\" : \"open\"));\n  }\n\n  function p() {\n    for (var e = this.parentElement; e; e = e.parentElement) {\n      if (n.test(e.className)) return;\n    }\n\n    [this, s(this)].forEach(function (e) {\n      e.className = (e.className.replace(a, \" \") + \" brace-hover\").replace(/\\s+/g, \" \");\n    });\n  }\n\n  function d() {\n    [this, s(this)].forEach(function (e) {\n      e.className = e.className.replace(a, \" \");\n    });\n  }\n\n  function h() {\n    for (var e = this.parentElement; e; e = e.parentElement) {\n      if (t.test(e.className)) return;\n    }\n\n    [this, s(this)].forEach(function (e) {\n      e.className = (e.className.replace(l, \" \") + \" brace-selected\").replace(/\\s+/g, \" \");\n    });\n  }\n}();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/prism.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz80NGJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL3Nhc3MvYXBwLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ "./resources/sass/notify.scss":
/*!************************************!*\
  !*** ./resources/sass/notify.scss ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9ub3RpZnkuc2Nzcz9iYzZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL3Nhc3Mvbm90aWZ5LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/sass/notify.scss\n");

/***/ }),

/***/ 0:
/*!******************************************************************************************!*\
  !*** multi ./resources/js/app.js ./resources/sass/app.scss ./resources/sass/notify.scss ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Users/mckenzie/Sites/packages/laravel-notify/packages/mckenziearts/laravel-notify/resources/js/app.js */"./resources/js/app.js");
__webpack_require__(/*! /Users/mckenzie/Sites/packages/laravel-notify/packages/mckenziearts/laravel-notify/resources/sass/app.scss */"./resources/sass/app.scss");
module.exports = __webpack_require__(/*! /Users/mckenzie/Sites/packages/laravel-notify/packages/mckenziearts/laravel-notify/resources/sass/notify.scss */"./resources/sass/notify.scss");


/***/ })

/******/ });